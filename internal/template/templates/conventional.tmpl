Generate a commit message following the Conventional Commits format (https://www.conventionalcommits.org/) for the following code changes:

```diff
{{.Diff}}
```

Rules:
1. Start with a type (feat, fix, docs, style, refactor, perf, test, chore) and optional scope in parentheses
2. Add a colon and space after the type/scope
3. Use the imperative, present tense ("add" not "added")
4. Do not capitalize the first letter
5. Do not end with a period
6. Limit the first line to 72 characters
7. Optional body: separate from subject with a blank line, explain what and why, not how
8. Output only the raw commit message text, without the diff or any other text

For large commits with many files:
- Focus on the overall theme of the changes rather than specific implementation details
- Look for common patterns across multiple files
- Use the file list and summary to understand the scope of changes
- Choose an appropriate scope that captures the main area of change

Example formats:
- feat: add login functionality
- fix(auth): correct password validation
- refactor: simplify user management logic
- chore(deps): update dependencies
- refactor(logging): standardize logger implementation across services